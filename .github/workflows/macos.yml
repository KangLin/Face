name: build_macos

on:
  workflow_call:
    outputs:
      name:
        description: "The artifact name"
        value: ${{ jobs.build_macos.outputs.name }}

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build_macos:
    strategy:
      matrix:
        # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
        BUILD_TYPE: [Release, Debug]
        qt_version: [6.5.1, 5.15.2, 5.12.12]
        include:
          - qt_version: 6.5.1
            qt_modules: qtscxml qtpositioning qt5compat qtwebchannel qtwebsockets

          - qt_version: 5.15.2
            qt_modules: ""

          - qt_version: 5.12.12
            qt_modules: ""

    runs-on: macos-latest

    env:
      BUILD_TYPE:  ${{ matrix.BUILD_TYPE }}
      SOURCE_DIR:  ${{github.workspace}}/.cache/source
      TOOSL_DIR:   ${{github.workspace}}/.cache/tools
      INSTALL_DIR: ${{github.workspace}}/.cache/install_macos
      qt_modules: ${{matrix.qt_modules}}
      FaceRecognizer_VERSION: v0.0.4
      artifact_name: build_macos
      VCPKGGITCOMMITID: 1286cac8751e13bb289061b7e3b89eb4c3f613a2

    # Map the job outputs to step outputs
    outputs:
      name: ${{ env.artifact_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Make directories
        run: |
          cmake -E make_directory ${{env.SOURCE_DIR}}
          cmake -E make_directory ${{env.TOOSL_DIR}}
          cmake -E make_directory ${{env.INSTALL_DIR}}
          cmake -E make_directory ${{github.workspace}}/build

      - name: Cache installed
        uses: actions/cache@v3
        id: cache-installed
        with:
          path: |
            ${{env.INSTALL_DIR}}
          key: Cache-macos-installed-qt${{matrix.qt_version}}-${{matrix.BUILD_TYPE}}

      - name: Install application
        run: |
          brew install nasm

      - name: run-vcpkg
        uses: lukka/run-vcpkg@v7.4
        with:
          vcpkgGitCommitId: ${{env.VCPKGGITCOMMITID}}
          vcpkgDirectory: ${{runner.workspace}}/vcpkg/
          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
          # compute its hash and append this to the computed cache's key.
          appendedCacheKey: vcpkg-macos-${{env.VCPKGGITCOMMITID}}
          vcpkgTriplet: '${{matrix.triplet}}'
          vcpkgArguments: 'openssl libpng pixman libjpeg-turbo libyuv ffmpeg opencv' # dlib ncnn
      
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1  # not v2!
        with:
          path: ${{env.TOOSL_DIR}}/qt
          key: qt${{matrix.qt_version}}-${{matrix.qt_arch}}
        
      - name: Install Qt
        # You may pin to the exact commit or the version.
        # uses: jurplel/install-qt-action@a962fb91949c8e846a3e4a944d50e7ef5cc3a28a
        uses: jurplel/install-qt-action@v3
        with:
          # Directory to install Qt
          dir: ${{env.TOOSL_DIR}}/qt # optional
          # Version of Qt to install
          version: ${{matrix.qt_version}} # optional, default is 5.15.2
          modules: ${{env.qt_modules}} # optional. See: https://ddalcino.github.io/aqt-list-server/

      - name: build SeetaFace2
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -f ${{env.INSTALL_DIR}}/lib/cmake/SeetaFaceDetectorConfig.cmake ]; then
            git clone https://github.com/KangLin/SeetaFace2.git
            cd SeetaFace2
            cmake -E make_directory build
            cd build
            cmake .. \
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} \
                -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" \
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake"
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          fi

      - name: build libfacedetection
        working-directory: ${{env.SOURCE_DIR}}
        run: |
          if [ ! -f ${{env.INSTALL_DIR}}/lib/cmake/facedetection/facedetectionConfig.cmake ]; then
            git clone https://github.com/ShiqiYu/libfacedetection.git
            cd libfacedetection
            cmake -E make_directory build
            cd build
            cmake .. \
                -DCMAKE_BUILD_TYPE=${{matrix.BUILD_TYPE}} \
                -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" \
                -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}/scripts/buildsystems/vcpkg.cmake" \
                -DBUILD_SHARED_LIBS=ON
            cmake --build . --config ${{matrix.BUILD_TYPE}}
            cmake --build . --config ${{matrix.BUILD_TYPE}} --target install
          fi

      - name: git clone RabbitCommon
        working-directory: ${{env.SOURCE_DIR}}
        run: git clone https://github.com/KangLin/RabbitCommon.git

      - name: Compile FaceRecognizer
        working-directory: ${{github.workspace}}/build
        env:
          RabbitCommon_DIR: ${{env.SOURCE_DIR}}/RabbitCommon
        run: |
          cmake ${{github.workspace}} \
              -DCMARK_SHARED=OFF \
              -DCMARK_TESTS=OFF \
              -DCMARK_STATIC=ON \
              -DCMAKE_BUILD_TYPE=${{ matrix.BUILD_TYPE }} \
              -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/build/install \
              -DCMAKE_TOOLCHAIN_FILE="${{env.VCPKG_ROOT}}\scripts\buildsystems\vcpkg.cmake" \
              -DSeetaFace_DIR=${{env.INSTALL_DIR}}/lib/cmake \
              -DSeetaNet_DIR=${{env.INSTALL_DIR}}/lib/cmake \
              -DSeetaFaceDetector_DIR=${{env.INSTALL_DIR}}/lib/cmake \
              -DSeetaFaceLandmarker_DIR=${{env.INSTALL_DIR}}/lib/cmake \
              -DSeetaFaceRecognizer_DIR=${{env.INSTALL_DIR}}/lib/cmake \
              -DSeetaFaceTracker_DIR=${{env.INSTALL_DIR}}/lib/cmake \
              -DSeetaQualityAssessor_DIR=${{env.INSTALL_DIR}}/lib/cmake \
              -Dfacedetection_DIR=${{env.INSTALL_DIR}}/lib/cmake/facedetection
          cmake --build . --config ${{ matrix.BUILD_TYPE }} --target install
          7z a FaceRecognizer_${{env.FaceRecognizer_VERSION}}_macos_qt${{matrix.qt_version}}.zip ./install/*

      - name: Update artifact
        if: ${{ matrix.BUILD_TYPE == 'Release' }} 
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}
          path: |
            ${{github.workspace}}/build/FaceRecognizer_${{env.FaceRecognizer_VERSION}}_macos_qt${{matrix.qt_version}}.zip
